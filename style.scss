@import "partials/variables";
@import "partials/mixins";
@import "partials/functions";

//* 37. SCSS a Sass - Podmínky: if, else, else if
$font-size: small;
body {
    background: $secondary-color;

    @if $font-size == small {
        font-size: 16px;    // ak je to pravda, tak sa ukáže to čo je v týchto {} //*? $font-size: small;
 }  @else if $font-size == normal {  // ak small nie je pravda, ale je pravda normal tak sa ukáže to čo je v týchto {} //*? $font-size: normal;
    font-size: 30px;
 } @else {              // ak nie je pravda small ani normal tak tak sa ukáže to čo je v týchto {}
    font-size: 10px;
 }
}

h1, h2, p {
    color: $text-color;
}
h1 {
    @include textStyle;
    font-size: em(50px);
}

h2 {
    @include big-text;
    @include pizza {
        text-decoration: underline;
    }
}

p {
    @include textStyle;
}

.alert-button {
    @include myButton;
    padding: 5px 10px;
}

.bigger-button {
    @include myButton;
    padding: em(5px) em(10px);
    font-size: sum(15px, 15px); //** použitie funkcie SUM - video 29
}

img {
    @include image;
    @include rounded($border: 2px solid red); // zobral border a rounded nechal v defaultnej hodnote -) argument treba pomenovať
    @include shadow(5px 5px 10px green, 10px 5px 10px blue); //
    padding: 30px 30px;
}

//** 16. SCSS a Sass - Mixiny: všeobecná mixina
// @include our-links;

//** === nesting ===
// .first-list {
//     font-size: 23px;

//       li {
//           color: #fff;

//           a {
//              text-decoration: none;
//           }
//      }
//  }

//** 25. SCSS a Sass - Nesting: nesting a hover

a {
    color: white;
    text-decoration: none;
    font-size: 18px;

    @include coffee {
        color: brown;
    }

    border-bottom: 2px solid transparentize($color: orange, $amount: 0.7); /* Funkce: transparentize (přednastavené funkce v SCSS) čokoľvek bude transparentné od 0.1 - 1 */

    &:hover {                           //** &: toto označuje horný selektor (a) 
        color: rgb(33, 33, 188); // funkcia darken / lighten color: darken(rgb(33, 33, 188), 30%)
    }
}

//*! Funkce: darken a lighten (přednastavené funkce v SCSS) //27. SCSS a Sass

.darken {
    color: $main-color;
    text-align: left;
    &:hover {
        color: darken($color: $secondary-color, $amount: 30%);
    }
}

//26. SCSS a Sass - Funkce: Co jsou to funkce
//** čo sú to funkcie ?
// Co dělá rgb? Do rgb pošlete čísla - množství červené barvy (r = red), množství zelené barvy (g = green) a množství modré barvy (b = blue). 
// My jsme dali 80 množství červené, 220 množství zelené a 180 množství modré (množství může být vždy od 0 do 255). 
//** To, na co se zde díváme, je funkce. Tato funkce se jmenuje rgb a poslali jsme do ní hodnoty. 
// A tato funkce nám vrátí konkrétní barvu. 
// A přesně tím jsou specifické funkce:
// mají název,
// posíláte do nich hodnoty,
//** funkce s hodnotami něco dělají (např. sčítají) a vrátí výsledek 



//* 31. SCSS a Sass - Dědění - rozšírenie: extend

.normal-notification {
    color: white;
    font-size: 20px;
    background: red;
    width: 220px;
    text-align: center;
}

.error-notification {
    @extend .normal-notification; //* obsahuje styly z .normal-notification + border...
    border: 5px solid blue;
}

//* 32. SCSS a Sass - Dědění: extend v media query
//*? pozor, aby to bolo celé obalené v {} media query
@media only screen {
    .test-class {
        color: blue;
    } 

    .another-class {
        @extend .test-class;
        font-size: 30px;
    }
}

//* 33. SCSS a Sass - negenerovaný obsah SCSS do CSS (tzv. extend only)

%test-only {
    font-style: italic;
}

.sub-title {
    @extend %test-only;
    font-size: 28px;
}

//*34. SCSS a Sass - Dědění: extend pro neexistující classu
.new-class {
    @extend .dont-exists !optional; //*? pokiaľ class dont-exists existuje, tak ju použi, ak neexistuje, tak je to pohode - !optional zabezpečí aby nebol error
    font-size: 25px;
}

//* 35. SCSS a Sass - Dědění: extend VS mixins
// extend zoberie kód, ktorý sme si zadefinovali v nejakej class a použije ho u inej class
// mixin zoberie kód, ktorý sme si zadefinovali v nejakej class (@mixin image) a použije ho u inej class (@include (image)
//*? aký je medzi nimi rozdieľ? 
// v podstate žiaden avšak mixiny môžu generovať viac kódu, pri extend sa neduplikuje narozdieľ od mixiny.

//* 36. SCSS a Sass - Podmínky: if a else v SCSS (Sass)
// po @if musí nasledovať podmienka ($font-size), ktorej výsledkom je niečo, čo je pravda alebo nepravda.
// rovná sa = sa zapisuje ==

// $font-size: small;
// body {
//     background: $ternary-color;
//     @if $font-size == small {
//         font-size: 16px;    // ak je to pravda, tak sa ukáže to čo je v týchto {} //*? $font-size: small;
//  }  @else {             // ak to nie je pravda, tak sa ukáže to čo je v týchto {} //*? $font-size: niečo iné;
//     font-size: 30px;
//  }
// }




//* 40. SCSS a Sass - Matematika v SCSS (matematické operace)

.result {
    font-size: $math-results;
}

//*42. SCSS a Sass - Cykly: cyklus for v SCSS a Sass
//*! through 6 znamená vrátane 6 , to 6 je do 5 , 6 neberie 
@for $i from 1 through 6 { 
    .col-#{$i} {
        width: $i * 5em; 
    }
}

//*43. SCSS a Sass - Cykly: cyklus each a list
// List

$students: david, harry, ron;

@each $one-student in $students {
    .#{one-student}-profile {
        background-image: url("img/#{$one-student}.png");
    }
}

// Map
$font-size: (very-small: 7px, small: 10px, medium: 15px, large: 20px);

@each $name, $size in $font-size {
    .#{$name} {
        font-size: $size;
    }
}

//*? do name sa uloží small... do size 7px... a ťahá sa to z $font-size

// While (pokiaľ)

$j: 1;
@while $j <= 4 {
    .picture-#{$j} {
        width: $j * 10%;
    }
    $j: $j + 1;
}

//*? while dá sa zameniť s for , 1 je menšie alebo rovné ako 4 , tak sa to prevedie, pripočíta +1 a ide dalej ...